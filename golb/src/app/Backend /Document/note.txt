

the env file as to be in same directory it is required from

you need to run the backend server as well.
use express router for modularity 

i included the refresh token manually  from the terminal


look at the was the authentication token was exported to export const variables next time 

DBpostgress terminal cmmands, remember i added the referesh token  column from th terminal

postgres=# CREATE DATABASE Golb;
ERROR:  database "golb" already exists
postgres=# \c golb
You are now connected to database "golb" as user "postgres".
golb=# \dt
         List of relations
 Schema | Name  | Type  |  Owner   
--------+-------+-------+----------
 public | users | table | postgres
(1 row)

golb=# SELECT * FROM users;

remember to create a utils to keep current user session (frontend)
create models and utils fro both frontend and backend



If your React frontend is running on http://localhost:3000 
and your Express backend is running on http://localhost:5000, your frontend might face a *CORS* error when trying to make requests to the backend because the origins don't match. 
Adding app.use(cors()); fixes this issue.

we also need a dynamic route at the backend for the front end


npm install --save-dev jest supertest cross-env       // for test

add the following in our pacckage.json
(
    "scripts": {
  "test": "cross-env NODE_ENV=test jest --runInBand"
}
)

"npx jest"  run test 




Read about Pooling in postgres db
downsides and advantages of each
singleton connections
Pooling


manage application configuration in one module
pass configuration around application

Use models folder for database related operations
// model and utils folders
users.model.js
findUserById
findUserByUsername


likes.model.js


CORS - limit your requests to your api domain
Group APIs - /api/users /api/admin etc

Start server on a separate function, make it accept multiple ports for tests

Make model functions reusable by using options
function findByUserId(userId, options = { orderBy, sortby }) {
    return pool.query(
        "SELECT * FROM posts WHERE user_id = $1 ORDER BY created_at DESC",
        [userId]
    );
}


destructing variables
need to create some tables 


// logging and monitoring - pino logger etc // measuring how long a route last etc
// Standardize errors  // USER_NOT_FOUND, INTERNAL_SRVER_ERROR
// separate controllers into individual functions
// autocatch npm - controller automatic try catch
// refactor remaining pool repitition

